// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SafeHouseBusiness.Infra.Data;

#nullable disable

namespace SafehouseBusiness.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220526173310_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Contato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.ToTable("contatos", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.DadosLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("senha");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("login");

                    b.HasKey("Id");

                    b.ToTable("dados_login", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.DocumentoLocalConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<int>("IdLocalConsulta")
                        .HasColumnType("int")
                        .HasColumnName("id_local_consulta");

                    b.Property<string>("Identificacao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("identificacao");

                    b.Property<int>("TipoDocumento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdLocalConsulta");

                    b.ToTable("documentos_local_consulta", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.DocumentoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Identificacao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("identificacao");

                    b.Property<int>("TipoDocumento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("documentos_usuarios", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .HasColumnType("longtext")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext")
                        .HasColumnName("cidade");

                    b.Property<string>("Complemento")
                        .HasColumnType("longtext")
                        .HasColumnName("complemento");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<string>("Logradouro")
                        .HasColumnType("longtext")
                        .HasColumnName("logradouro");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext")
                        .HasColumnName("numero");

                    b.HasKey("Id");

                    b.ToTable("enderecos", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.LocalConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<int>("IdContato")
                        .HasColumnType("int")
                        .HasColumnName("id_contato");

                    b.Property<int>("IdDocumento")
                        .HasColumnType("int");

                    b.Property<int>("IdEndereco")
                        .HasColumnType("int")
                        .HasColumnName("id_endereco");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoLocalConsulta")
                        .HasColumnType("int")
                        .HasColumnName("tipo_local_consulta");

                    b.HasKey("Id");

                    b.HasIndex("IdContato")
                        .IsUnique();

                    b.HasIndex("IdEndereco")
                        .IsUnique();

                    b.ToTable("local_consulta", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Reuniao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("horario");

                    b.Property<int>("IdLocalConsulta")
                        .HasColumnType("int");

                    b.Property<int>("IdUnidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdLocalConsulta");

                    b.HasIndex("IdUnidade");

                    b.ToTable("reunioes", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Aluguel")
                        .HasColumnType("decimal(2,2)")
                        .HasColumnName("aluguel");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<int>("IdLocalConsulta")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuarioUnidade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("numero");

                    b.Property<double>("Tamanho")
                        .HasColumnType("double")
                        .HasColumnName("tamanho");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdLocalConsulta");

                    b.HasIndex("UsuarioId");

                    b.ToTable("unidade", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<int>("IdContato")
                        .HasColumnType("int")
                        .HasColumnName("id_contato");

                    b.Property<int>("IdDadosLogin")
                        .HasColumnType("int")
                        .HasColumnName("id_dados_login");

                    b.Property<int>("IdEndereco")
                        .HasColumnType("int")
                        .HasColumnName("id_endereco");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("IdContato")
                        .IsUnique();

                    b.HasIndex("IdDadosLogin")
                        .IsUnique();

                    b.HasIndex("IdEndereco")
                        .IsUnique();

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.UsuarioLocalConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<int>("IdLocalConsulta")
                        .HasColumnType("int")
                        .HasColumnName("id_local_consulta");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdLocalConsulta");

                    b.HasIndex("IdUsuario");

                    b.ToTable("usuarios_locais_consulta", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.UsuarioReuniao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<int>("IdReuniao")
                        .HasColumnType("int")
                        .HasColumnName("id_reuniao");

                    b.Property<int>("IdUsuarioConsultor")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<int>("IdUsuarioPaciente")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdReuniao")
                        .IsUnique();

                    b.HasIndex("IdUsuarioConsultor");

                    b.HasIndex("IdUsuarioPaciente");

                    b.ToTable("usuarios_reunioes", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.UsuarioUnidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<int>("IdUnidade")
                        .HasColumnType("int")
                        .HasColumnName("id_unidade");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdUnidade");

                    b.HasIndex("IdUsuario");

                    b.ToTable("usuarios_unidades", (string)null);
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.DocumentoLocalConsulta", b =>
                {
                    b.HasOne("SafeHouseBusiness.Domain.Entidades.LocalConsulta", "LocalConsulta")
                        .WithMany("Documentos")
                        .HasForeignKey("IdLocalConsulta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalConsulta");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.DocumentoUsuario", b =>
                {
                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Usuario", "Usuario")
                        .WithMany("Documentos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.LocalConsulta", b =>
                {
                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Contato", "Contato")
                        .WithOne("LocalConsulta")
                        .HasForeignKey("SafeHouseBusiness.Domain.Entidades.LocalConsulta", "IdContato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Endereco", "Endereco")
                        .WithOne("LocalConsulta")
                        .HasForeignKey("SafeHouseBusiness.Domain.Entidades.LocalConsulta", "IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contato");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Reuniao", b =>
                {
                    b.HasOne("SafeHouseBusiness.Domain.Entidades.LocalConsulta", "LocalConsulta")
                        .WithMany("Reunioes")
                        .HasForeignKey("IdLocalConsulta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Unidade", "Unidade")
                        .WithMany("Reunioes")
                        .HasForeignKey("IdUnidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalConsulta");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Unidade", b =>
                {
                    b.HasOne("SafeHouseBusiness.Domain.Entidades.LocalConsulta", "LocalConsulta")
                        .WithMany("Unidades")
                        .HasForeignKey("IdLocalConsulta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalConsulta");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Usuario", b =>
                {
                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Contato", "Contato")
                        .WithOne("Usuario")
                        .HasForeignKey("SafeHouseBusiness.Domain.Entidades.Usuario", "IdContato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeHouseBusiness.Domain.Entidades.DadosLogin", "DadosLogin")
                        .WithOne("Usuario")
                        .HasForeignKey("SafeHouseBusiness.Domain.Entidades.Usuario", "IdDadosLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Endereco", "Endereco")
                        .WithOne("Usuario")
                        .HasForeignKey("SafeHouseBusiness.Domain.Entidades.Usuario", "IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contato");

                    b.Navigation("DadosLogin");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.UsuarioLocalConsulta", b =>
                {
                    b.HasOne("SafeHouseBusiness.Domain.Entidades.LocalConsulta", "LocalConsulta")
                        .WithMany("UsuariosLocalConsulta")
                        .HasForeignKey("IdLocalConsulta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Usuario", "Usuario")
                        .WithMany("UsuariosLocalConsulta")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalConsulta");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.UsuarioReuniao", b =>
                {
                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Reuniao", "Reuniao")
                        .WithOne("UsuariosReunioes")
                        .HasForeignKey("SafeHouseBusiness.Domain.Entidades.UsuarioReuniao", "IdReuniao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Usuario", "UsuarioConsultor")
                        .WithMany("UsuariosReunioesConsultor")
                        .HasForeignKey("IdUsuarioConsultor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Usuario", "UsuarioPaciente")
                        .WithMany("UsuariosReunioes")
                        .HasForeignKey("IdUsuarioPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reuniao");

                    b.Navigation("UsuarioConsultor");

                    b.Navigation("UsuarioPaciente");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.UsuarioUnidade", b =>
                {
                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Unidade", "Unidade")
                        .WithMany("UsuariosUnidades")
                        .HasForeignKey("IdUnidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeHouseBusiness.Domain.Entidades.Usuario", "Usuario")
                        .WithMany("UsuariosUnidades")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Contato", b =>
                {
                    b.Navigation("LocalConsulta")
                        .IsRequired();

                    b.Navigation("Usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.DadosLogin", b =>
                {
                    b.Navigation("Usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Endereco", b =>
                {
                    b.Navigation("LocalConsulta")
                        .IsRequired();

                    b.Navigation("Usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.LocalConsulta", b =>
                {
                    b.Navigation("Documentos");

                    b.Navigation("Reunioes");

                    b.Navigation("Unidades");

                    b.Navigation("UsuariosLocalConsulta");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Reuniao", b =>
                {
                    b.Navigation("UsuariosReunioes")
                        .IsRequired();
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Unidade", b =>
                {
                    b.Navigation("Reunioes");

                    b.Navigation("UsuariosUnidades");
                });

            modelBuilder.Entity("SafeHouseBusiness.Domain.Entidades.Usuario", b =>
                {
                    b.Navigation("Documentos");

                    b.Navigation("UsuariosLocalConsulta");

                    b.Navigation("UsuariosReunioes");

                    b.Navigation("UsuariosReunioesConsultor");

                    b.Navigation("UsuariosUnidades");
                });
#pragma warning restore 612, 618
        }
    }
}
